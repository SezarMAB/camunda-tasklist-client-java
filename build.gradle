plugins {
    id("com.apollographql.apollo3").version("3.2.1")
    id 'maven-publish'
    id 'java'
    id 'signing'
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
}

group = 'org.camunda.community'
version = '0.0.12'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    def apolloVersion = "3.2.1"
    def httpClientVersion = "5.1.3"
    implementation "org.apache.httpcomponents.client5:httpclient5:${httpClientVersion}"
    implementation "org.apache.httpcomponents.client5:httpclient5-fluent:${httpClientVersion}"
	
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.1'
	
    implementation "com.apollographql.apollo3:apollo-runtime:${apolloVersion}"
    implementation "com.apollographql.apollo3:apollo-api:${apolloVersion}"
    implementation "com.apollographql.apollo3:apollo-ast:${apolloVersion}"
    implementation "com.apollographql.apollo3:apollo-rx3-support:${apolloVersion}"
    
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

}

tasks.named('test') {
    useJUnitPlatform()
}

apollo {
    generateKotlinModels.set(false)
    packageName.set("io.camunda.tasklist.client")
}
task sourceJar(type: Jar) {
    outputs.cacheIf { true }
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    outputs.cacheIf { true }
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}
java {
    withSourcesJar()
}

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from(components.java)
        pom {
          name = "org.camunda.community:camunda-tasklist-client-java"
		  description = "Java client for the Tasklist API of Camunda Platform 8"
		  url = "https://github.com/camunda-community-hub/camunda-tasklist-client-java"
		  licenses {
		    license {
			  name = "The Apache License, Version 2.0"
			  url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
			}
	      }
		  developers {
		    developer {
	          name = "christophe.dame"
			  email = "christophe.dame@camunda.com"
			}
	      }
		  scm {
		    connection = "scm:git:git@github.com:camunda-community-hub/camunda-tasklist-client-java.git"
			developerConnection = "scm:git:git@github.com:camunda-community-hub/camunda-tasklist-client-java.git"
			url = "https://github.com/camunda-community-hub/camunda-tasklist-client-java"
	      }
      }
    }
  }
}

signing {
	sign publishing.publications
	
	def signingKeyId = System.getenv("maven-gpg-keyid")
	def signingKey = System.getenv("maven-gpg-key")
	def signingPassword = System.getenv("maven-gpg-passphrase")
	useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
}
