# Describes the User task.
type Task {
  id: ID!
  name: String!
  taskDefinitionId: String!
  processName: String!
  creationTime: String!
  completionTime: String
  assignee: String
  variables: [Variable!]
  taskState: TaskState!
  sortValues: [String!]
  isFirst: Boolean
  formKey: String
  processDefinitionId: String
  processInstanceId: String
  candidateGroups: [String!]
  candidateUsers: [String!]
  followUpDate: DateTime
  #Due date for Task
  dueDate: DateTime
}

#Describes task embedded form
type Form {
    #The unique identifier of the embedded form within one process
    id: String!
    #Reference to process definition
    processDefinitionId: String!
    #Form content
    schema: String!
}

#Task query - query to get one page of tasks.
input TaskQuery {
  state: TaskState
  assigned: Boolean
  assignee: String
  candidateGroup: String
  candidateUser: String
  processDefinitionId: String
  processInstanceId: String
  followUpDate: DateFilter
  dueDate: DateFilter
  pageSize: Int
  taskDefinitionId: String
  searchAfter: [String!]
  searchAfterOrEqual: [String!]
  searchBefore: [String!]
  searchBeforeOrEqual: [String!]
  sort: [TaskOrderBy]
}
input DateFilter {
  from: DateTime!
  to: DateTime!
}
input TaskOrderBy {
  field: TaskSortFields!
  order: Sort!
}
# State of the task.
enum TaskState {
    CREATED,
    COMPLETED,
    CANCELED
}
enum TaskSortFields {
  creationTime
  completionTime
  followUpDate
  dueDate
}
enum Sort {
  ASC
  DESC
}
# Variable used in task.
type Variable {
    id: ID!
    name: String!
    # full variable value
    value: String!
    # value preview (limited in size)
    previewValue: String!
    # shows, whether previewValue contains truncated value or full value
    isValueTruncated: Boolean!
}
# Change or add a variable with name and value.
input VariableInput {
    name: String!
    value: String!
}
# Describes the user.
type User {
    userId: ID!
    displayName: String
    permissions: [String!]
}
# What can be searched for.
type Query {
    # Get list of tasks based on `TaskQuery`.
    tasks(query: TaskQuery!): [Task!]!
    # Get one task by id. Returns task or error when task does not exist.
    task(id: String!): Task!
    # Get currently logged in user.
    currentUser: User!
    # Get task form by id and processDefinitionId
    form(id: String!, processDefinitionId: String!): Form
    # Get a collection of Variables by name
    variables(taskId: String!, variableNames: [String!]!): [Variable!]!
    # Get the variables by variable id
    variable(id: String!): Variable!
}
# What can be changed.
type Mutation {
    # Complete a task with taskId and optional variables. Returns the task.
    completeTask(taskId: String!, variables: [VariableInput!]!): Task!
    # Claim a task with taskId to currently logged in user. Returns the task.
    claimTask(taskId: String!, assignee: String, allowOverrideAssignment: Boolean): Task!
    # Unclaim a task with taskId. Returns the task.
	unclaimTask(taskId: String!): Task!
    # Delete process instance by given processInstanceId. Returns true if process instance could be deleted.
    deleteProcessInstance(processInstanceId: String!): Boolean!
}

scalar DateTime